// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}
// ? https://authjs.dev/reference/adapter/prisma#:~:text=identifier%2C%20token%5D)%0A%7D-,NOTE,-When%20using%20the
// ?                                            (Copy whole link)
// ?
// ? When using the MySQL connector for Prisma, the Prisma String type gets mapped to varchar(191) which may not be
// ? long enough to store fields such as id_token in the Account model. This can be avoided by explicitly using the
// ? Text type with @db.Text.
// ?
// ? Not neccessary for Sqlite or Postgres as the both map string to text
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  //@db.Text
  access_token       String?  //@db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  //@db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

